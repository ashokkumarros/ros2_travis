language: python
sudo: true

python:
  - "3.4"

addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
      - george-edison55-precise-backports # cmake 3.2.3 / doxygen 1.8.3
    packages:
      # nodejs >v4 compiler requirements
      - g++-4.8
      - gcc-4.8
      - cmake
      - cmake-data
      # - openjdk-7-jdk

cache:
  ccache: true
  directories:
    - $HOME/opt

before_install:
  # - Tools/scripts/configure-ci.sh
  # - if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then export CI_CRON_JOB=1 ; fi

  # - locale-gen en_US en_US.UTF-8 # set the locale
  # - sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8

  # - sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list'
  # - sudo apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116
  # - sudo sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/gazebo-latest.list'
  # - sudo apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys D2486D2DD83DB69272AFE98867170598AF249743


  # OSRF Debian dependencies
  - sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu trusty main" > /etc/apt/sources.list.d/ros-latest.list'
  - sudo apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys 421C365BD9FF1F717815A3895523BAEEB01FA116
  # Get the osrf (gazebo) debian repository:
  - sudo sh -c 'echo "deb http://packages.osrfoundation.org/gazebo/ubuntu trusty main" > /etc/apt/sources.list.d/gazebo-latest.list'
  - sudo apt-key adv --keyserver ha.pool.sks-keyservers.net --recv-keys D2486D2DD83DB69272AFE98867170598AF249743

  # Dependencies
  # - sudo add-apt-repository --yes ppa:kalakris/cmake # 2.8.11
  # - sudo add-apt-repository --yes ppa:kubuntu-ppa/backports # 2.8.12
  # - sudo add-apt-repository --yes ppa:george-edison55/precise-backports
  - sudo apt-get update -qq
  - sudo apt-get install build-essential
  - sudo apt-get install gawk
  - sudo apt-get install git 
  - sudo apt-get install wget
  - sudo apt-get install cppcheck 
  # - sudo apt-get install cmake 
  - sudo apt-get install libopencv-dev 
  # - sudo apt-get install python-empy 
  - sudo apt-get install python3-all-dev
  - sudo apt-get install libpython3.4-dev 
  # - sudo apt-get install libpython3-dev
  # - sudo apt-get install python3-empy 
  - sudo apt-get install python3-nose 
  # - sudo apt-get install python3-pip 
  - sudo apt-get install python3-setuptools 
  # - sudo apt-get install python3-vcstool
  # - sudo apt-get install clang-format 
  - sudo apt-get install pyflakes 
  # - sudo apt-get install python3-coverage 
  # - sudo apt-get install python3-mock 
  # - sudo apt-get install python3-pep8 
  - sudo apt-get install uncrustify

  ###########################
  ## OpenSplice
  ###########################
  - sudo apt-get install libopensplice64  # from packages.osrfoundation.org


  ###########################
  ## dependencies for FastRTPS
  ###########################
  # - sudo apt-get install libboost-chrono-dev  
  # - sudo apt-get install libboost-date-time-dev 
  # - sudo apt-get install libboost-program-options-dev 
  # - sudo apt-get install libboost-regex-dev 
  # - sudo apt-get install libboost-system-dev 
  # - sudo apt-get install libboost-thread-dev  


install: 
  # - pip install nose
  - pip3 install pep8
  # - pip install pydocstyle
  # - pip install pyflakes
  # - pip install flake8
  - pip install mock
  - pip install coverage
  - pip install empy # EmPy
  - pip install vcstool

  # # Compile cmake from sources
  # - CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.1-Linux-x86_64.tar.gz"
  # - mkdir cmake && travis_retry wget --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
  # - export PATH=${DEPS_DIR}/cmake/bin:${PATH}

  - mkdir -p $HOME/ros2_ws/src
  - vcs import ~/ros2_ws/src < ros2.repos


script:
  - export CXX=g++-4.8
  - export CC=gcc-4.8
  - cmake --version  
  - cd $HOME/ros2_ws/
  - src/ament/ament_tools/scripts/ament.py build --symlink-install

# before_cache:
#   - ccache -z

# notifications:
  # webhooks:
  #   urls:
  #     - https://webhooks.gitter.im/e/e5e0b55e353e53945b4b
  #   on_success: change  # options: [always|never|change] default: always
  #   on_failure: always  # options: [always|never|change] default: always
  #   on_start: false     # default: false

# compiler:
#   - gcc
# #  - clang

# env:
#   global:
#     # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
#     #   via the "travis encrypt" command using the project repo's public key
#     - secure: "FjIwqZQV2FhNPWYITX5LZXTE38yYqBaQdbm3QmbEg/30wnPTm1ZOLIU7o/aSvX615ImR8kHoryvFPDQDWc6wWfqTEs3Ytq2kIvcIJS2Y5l/0PFfpWJoH5gRd6hDThnoi+1oVMLvj1+bhn4yFlCCQ2vT/jxoGfiQqqgvHtv4fLzI="
#   matrix:
#     - CI_BUILD_TARGET="sitl minlure raspilot"
#     - CI_BUILD_TARGET="linux navio2 bebop"

# matrix:
#   fast_finish: true
#   include:
#     - compiler: "gcc"
#       env: CI_BUILD_TARGET="px4-v2 px4-v4"
#     - compiler: "gcc"
#       env: CI_BUILD_TARGET="sitltest"
